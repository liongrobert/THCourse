Using attribute selectors

This attribute selector targets any element that has a class attribute:
    [class] {
        border: solid 1px #ccc;
    }
To target an input element with a type value of submit, we write:
    input[type="submit"] {
        background-color: green;
    }
This targets a elements with a target value of _blank:
    a[target="_blank"] {
        color: tomato;
    }


DRY Example

CSS:
    .btn {
        cursor: pointer;   
        color: #fff;
        padding-left: 20px;
        padding-right: 20px;
    }
    .default-theme {
        background-color: coral;
    }
HTML:
    <input class="btn default-theme" type="submit" value="submit">



Child, Adjacent, and General Sibling Combinators
Combinators give us the flexibility of targeting any siblings of an element. We can use the greater-than sign (>), plus sign (+), or tilde symbol (~) to make our selectors more specific.
The > combinator targets a direct child of an element
The + combinator targets an element's immediate sibling
The ~ combinator targets all the specified siblings that follow an element


Using :first-child and :last-child
To target the first child div element inside a parent, we can write:
    div:first-child {
        margin-left: 0;
    }
To target the last li element in a list, we can write:
    li:last-child {
        float: right;
    }

Using :only-child and :empty
To target a span that is the only child element in a parent div, we can write:
    div span:only-child {
        font-size: .5em;
    }
To target all elements that have no child content, we can write:
    :empty {
        background: red;
    }

Using substring matching attribute selectors
^ tells the browser to match a piece of code that’s at the beginning of an attribute's value
$ matches a piece at the end of an attribute's value.
* matches any part of an attribute's value

Using :disabled and :checked
To target a disabled input element, we can write:
    input:disabled {
        background-color: grey;
    }
To target a radio button or checkbox when checked, we can write:
    :checked {
        border-color: red;
    }
:focus
    input:focus,
    textarea:focus{
        border-color:red;
    }
input[type="checkbox"]:checked + label { font-weight:bold; }

Using :nth-child
This target the even li elements in a parent:
li:nth-child(even) {
  background: blue;
  color: white;
}

Using :nth-of-type
This selector targets the 4th div inside the parent, no matter what type of child elements come before it:
div:nth-of-type(4) {
  background: #52bab3;
  color: white;
}
div:nth-last-of-type(){ // LAST OF THAT TYPE 
}

https://codepen.io/Guilh/pen/QwvxOp

:root{...}
:target{...} // whenever http://www.aaa.com/#anyID , then that ID will follow this css
#specificID:target{...} // whenever http://www.aaa.com/#specificID , then this specific ID will follow this css

Using :not() // if nav menu needs margin left, then "nav a:not(:first-child){...}"
This selector targets all input elements that do not have a type value of button:
input:not([type="button"]) {
  border-color: blue;
}

The ::first-line and ::first-letter pseudo-elements let us target the first line of text and the first character in a line of text.
.intro::first-line {font-weight:bold;font-size:1.4em;}
.intro::first-letter {
    float:left;font-size:80px;
    color:white;padding:5px 10px;
    background:grey;margin:10px 10px 0 0;
    border-radius:5px;line-height:1;
}

The ::before and ::after pseudo-elements let us insert virtual elements before and after an element’s content. These virtual elements are visible to the user and are style-able with CSS, but they do not appear in the source code.
What we need to know about pseudo-elements
The only way we're able to generate pseudo-elements is with the content property.
Pseudo-elements do not work with images and form elements. Replaced elements like input or img have no content, so we shouldn't be able to use generated content for them (source).
.zip::before{content: url(../img/icn-zip.svg);margin-right:8px;}
.zip::after{content: url(../img/icn-zip.svg);margin-right:8px;}
h1::before, h1::after{
    content: "";
    display:inline-block;width:24px;
    height:24px;border-radius:50%;
    background:coral;margin: 0 10px;
}

This pseudo-element rule will insert the value of an a element's title attribute after the link's content:

a::after {
  content: attr(title); // content: attr(href);
}